import java.io.*;
import java.nio.*;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;

public class RR {

	public static void main(String[] args) throws Exception {
		Files.walk(new File("view").toPath()).forEach(obj -> {

			try {
				File file = obj.toFile();
				if (file.isDirectory() || !file.isFile())
					return;

				System.out.println(file.getAbsolutePath());

				byte[] in = decrypt(toByteArrayNIO(file));
				
				if(in == null)
					return;

				if(new File(file.getAbsolutePath() + ".decrypted").exists())
					new File(file.getAbsolutePath() + ".decrypted").delete();
				Files.write(new File(file.getAbsolutePath() + ".decrypted").toPath(), in, StandardOpenOption.CREATE_NEW);
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		});
	}

	public static byte[] decrypt(byte[] in) throws IOException {
		
		int key[] = new int[] { 0xE5, 0x8E, 0x05, 0x3F, 0x5E, 0x8B, 0x71, 0xAB, 0x78, 0x80, 0xD4, 0x16, 0xDC, 0xF2,
				0x51, 0x75, 0x30, 0x9D, 0x43, 0x6B, 0x54, 0xE7, 0xD3, 0x95, 0xA4, 0x03, 0xBA, 0xDA, 0x82, 0x33, 0x81, 0x2D,
				0x35, 0xA6, 0x41, 0x94, 0x8A, 0x91, 0x2E, 0x45, 0x90, 0x1C, 0x38, 0x1A, 0xAC, 0x4B, 0xBC, 0x48, 0x59, 0xA1,
				0x6D, 0xA2, 0x39, 0xCC, 0x4D, 0x77, 0x07, 0x69, 0x14, 0x29, 0x8C, 0x64, 0x7E, 0xD9, 0x23, 0x9E, 0xDB, 0x31,
				0x20, 0xE4, 0xFF, 0xAE, 0x65, 0x26, 0x25, 0xC7, 0x73, 0xB5, 0xF7, 0x70, 0x13, 0x61, 0xAF, 0x34, 0x0F, 0x63,
				0x6F, 0x49, 0xB1, 0x21, 0xB2, 0x79, 0x84, 0x74, 0x19, 0xCB, 0x6E, 0xAD, 0x53, 0xE1, 0x0C, 0xC5, 0xB9, 0xA5,
				0x5D, 0xFE, 0x57, 0x1F, 0xA3, 0x4A, 0x93, 0x4F, 0x22, 0x99, 0xC2, 0xBD, 0x17, 0x2F, 0x8D, 0x1D, 0x36, 0x86,
				0x72, 0xFD, 0x96, 0xA0, 0x3A, 0xA8, 0x62, 0x1E, 0xD6, 0x3C, 0xF9, 0xB3, 0x9C, 0x5C, 0xFC, 0x0D, 0x52, 0xEF,
				0x7F, 0x83, 0xA7, 0x5F, 0x5B, 0xEA, 0x9A, 0x00, 0x6C, 0xE9, 0xC0, 0x58, 0xF8, 0x60, 0x10, 0xA9, 0xB6, 0xCD,
				0xE6, 0xDD, 0x3B, 0x11, 0x7C, 0xBE, 0x15, 0xD1, 0xB8, 0xD7, 0xE0, 0xC3, 0x08, 0x2B, 0xF0, 0xC4, 0x0A, 0xCA,
				0x2A, 0xD8, 0xCF, 0xEB, 0x4E, 0x04, 0xF5, 0x01, 0xB7, 0x12, 0xC9, 0x66, 0x40, 0xB4, 0x76, 0x3E, 0x85, 0x0E,
				0x55, 0x67, 0xBF, 0xEE, 0x32, 0xAA, 0x3D, 0xF6, 0x5A, 0x97, 0x7A, 0xE2, 0x8F, 0x89, 0xB0, 0xC1, 0x27, 0x56,
				0xD0, 0x68, 0x02, 0x9F, 0x1B, 0xFB, 0x46, 0xDE, 0xBB, 0xCE, 0x6A, 0x98, 0x4C, 0x7B, 0xF4, 0x09, 0xF1, 0x24,
				0xF3, 0xC8, 0x2C, 0x18, 0x44, 0xDF, 0x50, 0x37, 0xD2, 0xC6, 0x28, 0x87, 0xFA, 0x88, 0x92, 0xE3, 0x0B, 0x42,
				0x47, 0xE8, 0x7D, 0x06, 0xEC, 0xD5, 0x9B, 0xED };
		
		
		int index1 = 1, index2 = 1, lastKey = 0;
		String magic = "!#CWERD#";

		BufferedInputStream bufferedInputStream = new BufferedInputStream(new ByteArrayInputStream(in));
		byte[] bArr = new byte[magic.length()];
		bufferedInputStream.read(bArr, 0, magic.length());

		if (String.format("%x%x%x%x", bArr[0], bArr[1], bArr[2], bArr[3]).indexOf("21234357") != 0)
			return null;

		int available = bufferedInputStream.available();
		byte[] bArr5 = new byte[available];
		bufferedInputStream.read(bArr5, 0, available);
		bufferedInputStream.close();

		int length = bArr5.length;

		for (; index2 <= length;) {

			if (index1 >= 256)
				index1 = 0;

			lastKey = key[index1] + lastKey & 0xff;

			int tempValue = key[index1];
			key[index1] = key[lastKey]; // Swap key

			key[lastKey] = tempValue;

			bArr5[index2 - 1] ^= key[key[index1] + tempValue & 0XFF];

			index2++;
			index1++;
		}

		return bArr5;
	}

	public static byte[] toByteArrayNIO(File file) throws IOException {
		FileChannel fc = null;
		RandomAccessFile rac;
		try {
			try {
				rac = new RandomAccessFile(file, "r");
				fc = rac.getChannel();
				MappedByteBuffer byteBuffer = fc.map(FileChannel.MapMode.READ_ONLY, 0L, fc.size()).load();
				byte[] result = new byte[(int) fc.size()];
				if (byteBuffer.remaining() > 0) {
					byteBuffer.get(result, 0, byteBuffer.remaining());
				}
				fc.close();
				rac.close();
				return result;
			} finally {
				fc.close();
			}
		} catch (IOException e2) {
			e2.printStackTrace();
			throw e2;
		}
	}

}
